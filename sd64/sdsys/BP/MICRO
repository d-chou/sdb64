PROGRAM MICRO
*
*************************************************************
* Main Program                                              *
*************************************************************

gosub declare_variables
gosub open_files
if FilesOpened = True then
	gosub process_record
	if trim(TempRecord," ","B") <> "" then
		if TempRecord <> InputRecord then
			crt
			gosub save_Record_query	
			if RecordSaved =  True then
				gosub compile_record_query
			end		
		end else
			ErrorText = "Record is unchanged"
		end
	end else
		ErrorText = "Record is empty - not saved"
	end	
end else
	ErrorText = "Error: Could not open files"
end

End_Program:
	if ErrorText <> "" then
		crt ErrorText
		crt
	end
	Stop

*****************************************************
* SUBROUTINES: Alphabetical
*****************************************************

compile_record_query:
	crt
	prompt ""
	loop
		crt "Compile " : InfileName : " " : InRecordName : " <Y/N> : " :
	    input yn :
	    crt
	until index("YyNn",yn,1) > 0 repeat
	yn = upcase(yn)
	if yn = "Y" then
		execute "BASIC " : InFileName : " " : InRecordName
		crt
		loop
		    crt "Catalog? <L>ocal, <P>rivate, <G>lobal, <N>o : " :
	    	input lpgn :
	    	crt
		until index("LlPpGgNn",lpgn,1) > 0 repeat
		pgn = upcase(lpgn)
		begin case
			case lpgn = "L"
				execute "CATALOG " : InFileName : " " : InRecordName : " LOCAL"
			case lpgn = "P"
				execute "CATALOG " : InFileName : " " : InRecordName 
			case lpgn = "G"
				execute "CATALOG " : InFileName : " " : InRecordName : " GLOBAL"
			case lpgn = "N"
				ErrorText = InfileName : " " : InRecordName : " Not Cataloged"
		end case
		crt
	end			
return

declare_variables:
	True			= @true
	False			= @false
	LF				= char(10)

	* flag variables
	DeleteError		= False
	FilesOpened		= False
	RecordSaved		= False
	WriteError		= False
	
	cmd				= trim(@COMMAND," ","C")
	convert " " to @fm in cmd

	ErrorText		= ""
	InputRecord		= ""
	TempRecord 		= ""

	InFileName		= cmd<2>
	InRecordName	= cmd<3>
	TempFileName	= "$HOLD"
	TempRecordName	= InRecordName : ".micro"
return

open_files:
	open InFileName to InputFile THEN
		open TempFileName to TempFile then	
			FilesOpened = True
		end else
			ErrorText = "File Error: " : TempFileName : " could not be opened."	
			goto End_Program	
		end	
	end else
		ErrorText = "File Error: " : InFileName : " could not be opened."
		goto End_Program
	end
return

process_record:
    if trim(InRecordName," ","B") <> "" then
    	read InputRecord from InputFile,InRecordName then
    		TempRecord = InputRecord
    		convert @FM to LF in TempRecord  		
			Write TempRecord to Tempfile,TempRecordName on error WriteError = True
			if WriteError = True then
				ErrorText = "Write Error: Temporary Record Could Not Be Created"
				goto End_Program
			end
		end
	   	execute "!micro --encoding=iso-8859-1 " : "'" : TempFileName : "/" :  TempRecordName : "'"
		Read TempRecord from TempFile,TempRecordName then
			*null
		end else
			ErrorText =  "Record was not saved <Ctrl+s> in the micro editor."
			goto End_Program
		end
		convert LF to @FM in TempRecord
	end else
		ErrorText =  "Error: No Record Name Provided"
		goto End_Program
	end
return

save_record_query:
	prompt ""
	loop
		crt InfileName : " " : InRecordName : " has been updated, Save <Y/N> : " :
	    input yn :
	until index("YyNn",yn,1) > 0 repeat
	crt
	yn = upcase(yn)
	if yn = "Y" then
		gosub update_record
		RecordSaved = True			
	end else
		ErrorText = "Record Not Saved"
	end
return

update_record:
	Write TempRecord to InputFile,InRecordName on error WriteError = True
	if WriteError = True then
		ErrorText = "Write Error: Original Record " : InFileName : " " : InRecordName : " Could Not Be Updated."
		goto End_Program
	end else
		delete TempFile,TempRecordName on error DeleteError = True
		if DeleteError = True then
			ErrorText = "Warning: Temporary record " : Tempfilename : " " : TempRecordName : "was not  deleted."
		end
	end
return

end
